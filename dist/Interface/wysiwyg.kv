#:set BLOCK_SIZE_X 200
#:set BLOCK_SIZE_Y 150
#:set LINK_BUTTON_SIZE 35

<MenuButton@Button>:
    font_size: 14
    group: 'menu'
    size_hint_x: .1
    size_hint_y: .1
    color: 0, 0, 0, 1
    background_normal: ''
    background_down: 'square-xxl.png'
    background_color: 0.9, 0.9, 0.9, 1

<CustButton@Button>:
    font_size: 14
    color: 0, 0, 0, 1
    background_normal: ''
    background_down: 'square-xxl.png'
    background_color: 1, 1, 1, 1
    size_hint_x: None
    size_hint_y: None

<BuilderSuite@BoxLayout>:
    size_hint_y: None
    padding: 3
    height: 40
    spacing: 1
    canvas:
        Color:
            rgba: .88, .88, .88, 1
        Rectangle:
            pos: self.pos
            size: self.size
    CustButton:
        text: "Save"
        size: 40, 40
        size_hint_x: None
    CustButton:
        text: "Play"
        size: 40, 40
        size_hint_x: None
    CustButton:
        text: "Stop"
        size: 40, 40
        size_hint_x: None
    CustButton:
        text: "Extract"
        size_hint_x: None
        size: 60, 40
        on_release: root.extract()

<BuildSpace>
    id: buildSpc
    orientation: 'horizontal'
    size_hint_x: 0.2
    canvas:
        Color:
            rgba: 0.17, 0.47, 0.68, 1
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        canvas:
            Color:
                rgba: 0.73, 0.69, 0.89, 1
            Rectangle:
                pos: self.pos
                size: self.size

    BoxLayout:
        height: .5
        orientation: 'vertical'
        MenuButton:
            text: "Variable"
            on_release: root.addBlock("variable")

        MenuButton:
            text: "Methods"
            on_release: root.addBlock("method")

        MenuButton:
            text: "Class"
            on_release: root.addBlock("class")

        MenuButton:
            text: "Layer"

        MenuButton:
            text: "Probe"

        MenuButton:
            text: "Output"
            on_release: root.addBlock("output")

<Scatterer>:
    do_rotation: False
    do_scale: False
    do_resize: False
    size_hint: None, None
    size: BLOCK_SIZE_X,BLOCK_SIZE_Y
    canvas.after:
        Color:
            rgba: 1, 1, 1, .5
        Rectangle:
            size: self.size
            pos: self.pos

			
<output_Block>:
    size: BLOCK_SIZE_X,BLOCK_SIZE_Y
    canvas:
        Color:
            rgba: 0, 0, 0, 1
        Rectangle:
            pos: self.pos
            size: self.size
	Button:
		on_release: root.channel_dr()
		text: "Link"
		size: LINK_BUTTON_SIZE,LINK_BUTTON_SIZE
    ##Label:
        ##text: 'Output'
        ##color: 0, 0, 0, 1
	##CheckBox:
		##size: sp(32), sp(32)
		##on_active: root.channel_dr()


<variable_Block>:
    BoxLayout:
        id: variable
		size: BLOCK_SIZE_X,BLOCK_SIZE_Y
        canvas:
            Color:
                rgba: 0, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
	    GridLayout:
	        cols: 3
	        rows: 3
		    ##orientation: 'vertical'
		    ##BoxLayout:
		        ##orientation: 'horizontal'
		    Label:
		        size_hint_x: 0.3
				text: 'Name: '
				color: 255, 0, 0, 1
			TextInput:
			    size_hint_x: 0.4
			    id: name
				text: ""
				multiline: False
				font_size: 10
			Button:
			    size_hint_x: 0.3
			    on_release: root.takeName(name.text)
			    text: "Push"
	        ##BoxLayout:
	            ##orientation: 'horizontal'
	        Label:
				text: 'Value'
				color: 255, 0, 0, 1
			TextInput:
			    id: value
				text: ""
				multiline: False
				font_size: 10
			Button:
			    on_release: root.takeValue(value.text)
			    text: "Push"
	        ##BoxLayout:
	        Label:
				text: ''
			Label:
			    text: ''
			Button:
				on_release: root.channel_dr()
				text: "Link"
				size: LINK_BUTTON_SIZE,LINK_BUTTON_SIZE
	            ##CheckBox:
                    ##size: sp(32), sp(32)
                    ##on_active: root.channel_dr()
				
<method_Block>:
    GridLayout:
        cols: 2
        rows: 3
        size: BLOCK_SIZE_X,BLOCK_SIZE_Y
        canvas:
            Color:
                rgba: 0, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: 'Method:'
            color: 1, 1, 1, 1
        Label:
            id: type
            text: ' '
        Button:
		    on_release: root.channel_dr()
		    text: "Link"
		    size: LINK_BUTTON_SIZE,LINK_BUTTON_SIZE
		Button:
		    on_release: dropdownMeth.open(self)
		    text: "Method Select"

		ScrollView:
	        DropDown:
	            auto_width: False
                id: dropdownMeth
                on_parent: self.dismiss()
                size_hint_x: None
                size_hint_y: None
                width: 125
                CustButton:
                    text: 'if'
                    size: 80, 20
                    on_press: type.text='if'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'while'
                    size: 80, 20
                    on_press: type.text='while'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'do-while'
                    size: 80, 20
                    on_press: type.text='do-while'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'for'
                    size: 80, 20
                    on_press: type.text='for'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.abs'
                    size: 80, 20
                    on_press: type.text='tf.abs'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.accumulate_n'
                    size: 100, 20
                    on_press: type.text='tf.accumulate_n'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.acos'
                    size: 100, 20
                    on_press: type.text='tf.acos'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.add'
                    size: 100, 20
                    on_press: type.text='tf.add'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.add_n'
                    size: 100, 20
                    on_press: type.text='tf.add_n'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.argmax'
                    size: 100, 20
                    on_press: type.text='tf.argmax'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.argmin'
                    size: 100, 20
                    on_press: type.text='tf.argmin'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.asin'
                    size: 100, 20
                    on_press: type.text='tf.asin'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.atan'
                    size: 100, 20
                    on_press: type.text='tf.atan'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.betainc'
                    size: 100, 20
                    on_press: type.text='tf.betainc'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.ceil'
                    size: 100, 20
                    on_press: type.text='tf.ceil'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cholesky'
                    size: 100, 20
                    on_press: type.text='tf.cholesky'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cholesky_solve'
                    size: 100, 20
                    on_press: type.text='tf.cholesky_solve'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.complex'
                    size: 100, 20
                    on_press: type.text='tf.complex'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.conji'
                    size: 100, 20
                    on_press: type.text='tf.conji'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cos'
                    size: 100, 20
                    on_press: type.text='tf.cos'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.count_nonzero'
                    size: 100, 20
                    on_press: type.text='tf.count_nonzero'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cross'
                    size: 100, 20
                    on_press: type.text='tf.cross'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cumprod'
                    size: 100, 20
                    on_press: type.text='tf.cumprod'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.cumsum'
                    size: 100, 20
                    on_press: type.text='tf.cumsum'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.diag'
                    size: 100, 20
                    on_press: type.text='tf.diag'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.diag_part'
                    size: 100, 20
                    on_press: type.text='tf.diag_part'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.diagamma'
                    size: 100, 20
                    on_press: type.text='tf.diagamma'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.div'
                    size: 100, 20
                    on_press: type.text='tf.div'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.divide'
                    size: 100, 20
                    on_press: type.text='tf.divide'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.edit_distance'
                    size: 100, 20
                    on_press: type.text='tf.edit_distance'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.einsum'
                    size: 100, 20
                    on_press: type.text='tf.einsum'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.erf'
                    size: 100, 20
                    on_press: type.text='tf.erf'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.erfc'
                    size: 100, 20
                    on_press: type.text='tf.erfc'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.exp'
                    size: 100, 20
                    on_press: type.text='tf.exp'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.expm1'
                    size: 100, 20
                    on_press: type.text='tf.expm1'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.eye'
                    size: 100, 20
                    on_press: type.text='tf.eye'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.floor'
                    size: 100, 20
                    on_press: type.text='tf.floor'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.floor_div'
                    size: 100, 20
                    on_press: type.text='tf.floor_div'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.floormod'
                    size: 100, 20
                    on_press: type.text='tf.floormod'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.floordiv'
                    size: 100, 20
                    on_press: type.text='tf.floordiv'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.igamma'
                    size: 100, 20
                    on_press: type.text='tf.igamma'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.igammac'
                    size: 100, 20
                    on_press: type.text='tf.igammac'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.imag'
                    size: 100, 20
                    on_press: type.text='tf.imag'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.invert_permutation'
                    size: 100, 20
                    on_press: type.text='tf.invert_permutation'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.lbeta'
                    size: 100, 20
                    on_press: type.text='tf.lbeta'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.lgamma'
                    size: 100, 20
                    on_press: type.text='tf.lgamma'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.log'
                    size: 100, 20
                    on_press: type.text='tf.log'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.log1p'
                    size: 100, 20
                    on_press: type.text='tf.log1p'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matmul'
                    size: 100, 20
                    on_press: type.text='tf.matmul'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_band_part'
                    size: 100, 20
                    on_press: type.text='tf.matrix_band_part'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_determinant'
                    size: 100, 20
                    on_press: type.text='tf.matrix_determinant'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_diag'
                    size: 100, 20
                    on_press: type.text='tf.matrix_diag'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_inverse'
                    size: 100, 20
                    on_press: type.text='tf.matrix_inverse'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_set_diag'
                    size: 100, 20
                    on_press: type.text='tf.matrix_set_diag'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_solve'
                    size: 100, 20
                    on_press: type.text='tf.matrix_solve'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_solve_ls'
                    size: 100, 20
                    on_press: type.text='tf.matrix_solve_ls'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_transpose'
                    size: 100, 20
                    on_press: type.text='tf.matrix_transpose'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.matrix_triangular'
                    size: 100, 20
                    on_press: type.text='tf.matrix_triangular'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.maximum'
                    size: 100, 20
                    on_press: type.text='tf.maximum'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.minimum'
                    size: 100, 20
                    on_press: type.text='tf.minimum'
                    on_release: root.set_method(self.text)
                CustButton:
                    text: 'tf.mod'
                    size: 100, 20
                    on_press: type.text='tf.mod'
                    on_release: root.set_method(self.text)

<class_Block>:
    size: BLOCK_SIZE_X,BLOCK_SIZE_Y
    canvas:
        Color:
            rgba: 0, 0, 0, 1
        Rectangle:
            pos: self.pos
            size: self.size
    ##Label:
      ##  text: 'Class'
      ##  color: 0, 0, 0, 1
    Button:
		on_release: root.channel_dr()
		text: "Link"
		size: LINK_BUTTON_SIZE,LINK_BUTTON_SIZE
	##CheckBox:
		##size: sp(32), sp(32)
		##on_active: root.channel_dr()




<SampGridLayout>:
    rows: 3

    DocumentOptions:

    BuilderSuite:

    BuildSpace:

